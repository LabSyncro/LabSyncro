/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2023 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';
  import type * as c from 'zapatos/custom';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */

  export type device_quality = 'broken' | 'healthy' | 'lost' | 'needs fixing';
  export namespace every {
    export type device_quality = ['broken', 'healthy', 'lost', 'needs fixing'];
  }
  export type maintenance_status = 'cancelled' | 'completed' | 'maintaining' | 'pending';
  export namespace every {
    export type maintenance_status = ['cancelled', 'completed', 'maintaining', 'pending'];
  }
  export type reservation_status = 'approved' | 'cancelled' | 'pending' | 'ready';
  export namespace every {
    export type reservation_status = ['approved', 'cancelled', 'pending', 'ready'];
  }
  export type shipment_status = 'cancelled' | 'completed' | 'pending' | 'shipping';
  export namespace every {
    export type shipment_status = ['cancelled', 'completed', 'pending', 'shipping'];
  }
  export type user_role = 'admin' | 'lab_manager' | 'user';
  export namespace every {
    export type user_role = ['admin', 'lab_manager', 'user'];
  }

  /* --- tables --- */

  /**
   * **categories**
   * - Table in database
   */
  export namespace categories {
    export type Table = 'categories';
    export interface Selectable {
      /**
      * **categories.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **categories.name**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      name: db.JSONValue;
    }
    export interface JSONSelectable {
      /**
      * **categories.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **categories.name**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      name: db.JSONValue;
    }
    export interface Whereable {
      /**
      * **categories.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **categories.name**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      name?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **categories.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **categories.name**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      name: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **categories.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **categories.name**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      name?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment>;
    }
    export type UniqueIndex = 'categories_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **device_kinds**
   * - Table in database
   */
  export namespace device_kinds {
    export type Table = 'device_kinds';
    export interface Selectable {
      /**
      * **device_kinds.available_quantity**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      available_quantity: db.JSONValue;
      /**
      * **device_kinds.category_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      category_id: string | null;
      /**
      * **device_kinds.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **device_kinds.meta**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      meta: db.JSONValue;
      /**
      * **device_kinds.name**
      * - `text` in database
      * - Nullable, no default
      */
      name: string | null;
    }
    export interface JSONSelectable {
      /**
      * **device_kinds.available_quantity**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      available_quantity: db.JSONValue;
      /**
      * **device_kinds.category_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      category_id: string | null;
      /**
      * **device_kinds.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **device_kinds.meta**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      meta: db.JSONValue;
      /**
      * **device_kinds.name**
      * - `text` in database
      * - Nullable, no default
      */
      name: string | null;
    }
    export interface Whereable {
      /**
      * **device_kinds.available_quantity**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      available_quantity?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **device_kinds.category_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      category_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **device_kinds.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **device_kinds.meta**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      meta?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **device_kinds.name**
      * - `text` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **device_kinds.available_quantity**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      available_quantity: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment;
      /**
      * **device_kinds.category_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      category_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **device_kinds.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **device_kinds.meta**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      meta: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment;
      /**
      * **device_kinds.name**
      * - `text` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **device_kinds.available_quantity**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      available_quantity?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment>;
      /**
      * **device_kinds.category_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      category_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **device_kinds.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **device_kinds.meta**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      meta?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment>;
      /**
      * **device_kinds.name**
      * - `text` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'device_kinds_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **devices**
   * - Table in database
   */
  export namespace devices {
    export type Table = 'devices';
    export interface Selectable {
      /**
      * **devices.allowed_borrow_role**
      * - `device_allowed_borrow_role` in database
      * - `NOT NULL`, no default
      */
      allowed_borrow_role: c.PgDevice_allowed_borrow_role;
      /**
      * **devices.available_quantity**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      available_quantity: number;
      /**
      * **devices.borrower_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      borrower_id: string | null;
      /**
      * **devices.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **devices.kind**
      * - `uuid` in database
      * - Nullable, no default
      */
      kind: string | null;
      /**
      * **devices.lab_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      lab_id: string | null;
      /**
      * **devices.meta**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      meta: db.JSONValue;
      /**
      * **devices.quality**
      * - `device_quality` in database
      * - `NOT NULL`, no default
      */
      quality: device_quality;
      /**
      * **devices.quantity**
      * - `int4` in database
      * - Nullable, default: `0`
      */
      quantity: number | null;
      /**
      * **devices.unit**
      * - `text` in database
      * - Nullable, no default
      */
      unit: string | null;
    }
    export interface JSONSelectable {
      /**
      * **devices.allowed_borrow_role**
      * - `device_allowed_borrow_role` in database
      * - `NOT NULL`, no default
      */
      allowed_borrow_role: c.PgDevice_allowed_borrow_role;
      /**
      * **devices.available_quantity**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      available_quantity: number;
      /**
      * **devices.borrower_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      borrower_id: string | null;
      /**
      * **devices.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **devices.kind**
      * - `uuid` in database
      * - Nullable, no default
      */
      kind: string | null;
      /**
      * **devices.lab_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      lab_id: string | null;
      /**
      * **devices.meta**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      meta: db.JSONValue;
      /**
      * **devices.quality**
      * - `device_quality` in database
      * - `NOT NULL`, no default
      */
      quality: device_quality;
      /**
      * **devices.quantity**
      * - `int4` in database
      * - Nullable, default: `0`
      */
      quantity: number | null;
      /**
      * **devices.unit**
      * - `text` in database
      * - Nullable, no default
      */
      unit: string | null;
    }
    export interface Whereable {
      /**
      * **devices.allowed_borrow_role**
      * - `device_allowed_borrow_role` in database
      * - `NOT NULL`, no default
      */
      allowed_borrow_role?: c.PgDevice_allowed_borrow_role | db.Parameter<c.PgDevice_allowed_borrow_role> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgDevice_allowed_borrow_role | db.Parameter<c.PgDevice_allowed_borrow_role> | db.SQLFragment | db.ParentColumn>;
      /**
      * **devices.available_quantity**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      available_quantity?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **devices.borrower_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      borrower_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **devices.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **devices.kind**
      * - `uuid` in database
      * - Nullable, no default
      */
      kind?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **devices.lab_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      lab_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **devices.meta**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      meta?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **devices.quality**
      * - `device_quality` in database
      * - `NOT NULL`, no default
      */
      quality?: device_quality | db.Parameter<device_quality> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, device_quality | db.Parameter<device_quality> | db.SQLFragment | db.ParentColumn>;
      /**
      * **devices.quantity**
      * - `int4` in database
      * - Nullable, default: `0`
      */
      quantity?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **devices.unit**
      * - `text` in database
      * - Nullable, no default
      */
      unit?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **devices.allowed_borrow_role**
      * - `device_allowed_borrow_role` in database
      * - `NOT NULL`, no default
      */
      allowed_borrow_role: c.PgDevice_allowed_borrow_role | db.Parameter<c.PgDevice_allowed_borrow_role> | db.SQLFragment;
      /**
      * **devices.available_quantity**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      available_quantity: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **devices.borrower_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      borrower_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **devices.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **devices.kind**
      * - `uuid` in database
      * - Nullable, no default
      */
      kind?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **devices.lab_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      lab_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **devices.meta**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      meta: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment;
      /**
      * **devices.quality**
      * - `device_quality` in database
      * - `NOT NULL`, no default
      */
      quality: device_quality | db.Parameter<device_quality> | db.SQLFragment;
      /**
      * **devices.quantity**
      * - `int4` in database
      * - Nullable, default: `0`
      */
      quantity?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **devices.unit**
      * - `text` in database
      * - Nullable, no default
      */
      unit?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **devices.allowed_borrow_role**
      * - `device_allowed_borrow_role` in database
      * - `NOT NULL`, no default
      */
      allowed_borrow_role?: c.PgDevice_allowed_borrow_role | db.Parameter<c.PgDevice_allowed_borrow_role> | db.SQLFragment | db.SQLFragment<any, c.PgDevice_allowed_borrow_role | db.Parameter<c.PgDevice_allowed_borrow_role> | db.SQLFragment>;
      /**
      * **devices.available_quantity**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      available_quantity?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **devices.borrower_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      borrower_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **devices.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **devices.kind**
      * - `uuid` in database
      * - Nullable, no default
      */
      kind?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **devices.lab_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      lab_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **devices.meta**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      meta?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment>;
      /**
      * **devices.quality**
      * - `device_quality` in database
      * - `NOT NULL`, no default
      */
      quality?: device_quality | db.Parameter<device_quality> | db.SQLFragment | db.SQLFragment<any, device_quality | db.Parameter<device_quality> | db.SQLFragment>;
      /**
      * **devices.quantity**
      * - `int4` in database
      * - Nullable, default: `0`
      */
      quantity?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **devices.unit**
      * - `text` in database
      * - Nullable, no default
      */
      unit?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'devices_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **expiration_extension_requests**
   * - Table in database
   */
  export namespace expiration_extension_requests {
    export type Table = 'expiration_extension_requests';
    export interface Selectable {
      /**
      * **expiration_extension_requests.receipt_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      receipt_id: string;
      /**
      * **expiration_extension_requests.return_at**
      * - `timetz` in database
      * - `NOT NULL`, no default
      */
      return_at: db.TimeTzString;
      /**
      * **expiration_extension_requests.status**
      * - `request_status` in database
      * - `NOT NULL`, no default
      */
      status: c.PgRequest_status;
      /**
      * **expiration_extension_requests.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
    }
    export interface JSONSelectable {
      /**
      * **expiration_extension_requests.receipt_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      receipt_id: string;
      /**
      * **expiration_extension_requests.return_at**
      * - `timetz` in database
      * - `NOT NULL`, no default
      */
      return_at: db.TimeTzString;
      /**
      * **expiration_extension_requests.status**
      * - `request_status` in database
      * - `NOT NULL`, no default
      */
      status: c.PgRequest_status;
      /**
      * **expiration_extension_requests.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
    }
    export interface Whereable {
      /**
      * **expiration_extension_requests.receipt_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      receipt_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **expiration_extension_requests.return_at**
      * - `timetz` in database
      * - `NOT NULL`, no default
      */
      return_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn>;
      /**
      * **expiration_extension_requests.status**
      * - `request_status` in database
      * - `NOT NULL`, no default
      */
      status?: c.PgRequest_status | db.Parameter<c.PgRequest_status> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgRequest_status | db.Parameter<c.PgRequest_status> | db.SQLFragment | db.ParentColumn>;
      /**
      * **expiration_extension_requests.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **expiration_extension_requests.receipt_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      receipt_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **expiration_extension_requests.return_at**
      * - `timetz` in database
      * - `NOT NULL`, no default
      */
      return_at: db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment;
      /**
      * **expiration_extension_requests.status**
      * - `request_status` in database
      * - `NOT NULL`, no default
      */
      status: c.PgRequest_status | db.Parameter<c.PgRequest_status> | db.SQLFragment;
      /**
      * **expiration_extension_requests.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **expiration_extension_requests.receipt_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      receipt_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **expiration_extension_requests.return_at**
      * - `timetz` in database
      * - `NOT NULL`, no default
      */
      return_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment>;
      /**
      * **expiration_extension_requests.status**
      * - `request_status` in database
      * - `NOT NULL`, no default
      */
      status?: c.PgRequest_status | db.Parameter<c.PgRequest_status> | db.SQLFragment | db.SQLFragment<any, c.PgRequest_status | db.Parameter<c.PgRequest_status> | db.SQLFragment>;
      /**
      * **expiration_extension_requests.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'expiration_extension_requests_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **inventory_assessments**
   * - Table in database
   */
  export namespace inventory_assessments {
    export type Table = 'inventory_assessments';
    export interface Selectable {
      /**
      * **inventory_assessments.accountant_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      accountant_id: string | null;
      /**
      * **inventory_assessments.devices**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      devices: db.JSONValue;
      /**
      * **inventory_assessments.finished_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      finished_at: db.TimeTzString | null;
      /**
      * **inventory_assessments.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **inventory_assessments.lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      lab_id: string;
    }
    export interface JSONSelectable {
      /**
      * **inventory_assessments.accountant_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      accountant_id: string | null;
      /**
      * **inventory_assessments.devices**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      devices: db.JSONValue;
      /**
      * **inventory_assessments.finished_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      finished_at: db.TimeTzString | null;
      /**
      * **inventory_assessments.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **inventory_assessments.lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      lab_id: string;
    }
    export interface Whereable {
      /**
      * **inventory_assessments.accountant_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      accountant_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **inventory_assessments.devices**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      devices?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **inventory_assessments.finished_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      finished_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn>;
      /**
      * **inventory_assessments.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **inventory_assessments.lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      lab_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **inventory_assessments.accountant_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      accountant_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **inventory_assessments.devices**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      devices: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment;
      /**
      * **inventory_assessments.finished_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      finished_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment;
      /**
      * **inventory_assessments.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **inventory_assessments.lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      lab_id: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **inventory_assessments.accountant_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      accountant_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **inventory_assessments.devices**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      devices?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment>;
      /**
      * **inventory_assessments.finished_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      finished_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **inventory_assessments.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **inventory_assessments.lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      lab_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'inventory_assessments_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **labs**
   * - Table in database
   */
  export namespace labs {
    export type Table = 'labs';
    export interface Selectable {
      /**
      * **labs.admin_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      admin_id: string | null;
      /**
      * **labs.branch**
      * - `text` in database
      * - Nullable, no default
      */
      branch: string | null;
      /**
      * **labs.faculty**
      * - `text` in database
      * - Nullable, no default
      */
      faculty: string | null;
      /**
      * **labs.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **labs.name**
      * - `text` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **labs.room**
      * - `text` in database
      * - Nullable, no default
      */
      room: string | null;
      /**
      * **labs.timetable**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      timetable: db.JSONValue;
    }
    export interface JSONSelectable {
      /**
      * **labs.admin_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      admin_id: string | null;
      /**
      * **labs.branch**
      * - `text` in database
      * - Nullable, no default
      */
      branch: string | null;
      /**
      * **labs.faculty**
      * - `text` in database
      * - Nullable, no default
      */
      faculty: string | null;
      /**
      * **labs.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **labs.name**
      * - `text` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **labs.room**
      * - `text` in database
      * - Nullable, no default
      */
      room: string | null;
      /**
      * **labs.timetable**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      timetable: db.JSONValue;
    }
    export interface Whereable {
      /**
      * **labs.admin_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      admin_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **labs.branch**
      * - `text` in database
      * - Nullable, no default
      */
      branch?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **labs.faculty**
      * - `text` in database
      * - Nullable, no default
      */
      faculty?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **labs.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **labs.name**
      * - `text` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **labs.room**
      * - `text` in database
      * - Nullable, no default
      */
      room?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **labs.timetable**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      timetable?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **labs.admin_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      admin_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **labs.branch**
      * - `text` in database
      * - Nullable, no default
      */
      branch?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **labs.faculty**
      * - `text` in database
      * - Nullable, no default
      */
      faculty?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **labs.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **labs.name**
      * - `text` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **labs.room**
      * - `text` in database
      * - Nullable, no default
      */
      room?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **labs.timetable**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      timetable: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **labs.admin_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      admin_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **labs.branch**
      * - `text` in database
      * - Nullable, no default
      */
      branch?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **labs.faculty**
      * - `text` in database
      * - Nullable, no default
      */
      faculty?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **labs.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **labs.name**
      * - `text` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **labs.room**
      * - `text` in database
      * - Nullable, no default
      */
      room?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **labs.timetable**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      timetable?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment>;
    }
    export type UniqueIndex = 'labs_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **maintenances**
   * - Table in database
   */
  export namespace maintenances {
    export type Table = 'maintenances';
    export interface Selectable {
      /**
      * **maintenances.complete_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      complete_at: db.TimeTzString | null;
      /**
      * **maintenances.device_ids**
      * - `jsonb` in database
      * - Nullable, no default
      */
      device_ids: db.JSONValue | null;
      /**
      * **maintenances.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **maintenances.lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      lab_id: string;
      /**
      * **maintenances.maintainer_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      maintainer_id: string | null;
      /**
      * **maintenances.start_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      start_at: db.TimeTzString | null;
      /**
      * **maintenances.status**
      * - `maintenance_status` in database
      * - `NOT NULL`, no default
      */
      status: maintenance_status;
    }
    export interface JSONSelectable {
      /**
      * **maintenances.complete_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      complete_at: db.TimeTzString | null;
      /**
      * **maintenances.device_ids**
      * - `jsonb` in database
      * - Nullable, no default
      */
      device_ids: db.JSONValue | null;
      /**
      * **maintenances.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **maintenances.lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      lab_id: string;
      /**
      * **maintenances.maintainer_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      maintainer_id: string | null;
      /**
      * **maintenances.start_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      start_at: db.TimeTzString | null;
      /**
      * **maintenances.status**
      * - `maintenance_status` in database
      * - `NOT NULL`, no default
      */
      status: maintenance_status;
    }
    export interface Whereable {
      /**
      * **maintenances.complete_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      complete_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn>;
      /**
      * **maintenances.device_ids**
      * - `jsonb` in database
      * - Nullable, no default
      */
      device_ids?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **maintenances.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **maintenances.lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      lab_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **maintenances.maintainer_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      maintainer_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **maintenances.start_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      start_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn>;
      /**
      * **maintenances.status**
      * - `maintenance_status` in database
      * - `NOT NULL`, no default
      */
      status?: maintenance_status | db.Parameter<maintenance_status> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, maintenance_status | db.Parameter<maintenance_status> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **maintenances.complete_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      complete_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment;
      /**
      * **maintenances.device_ids**
      * - `jsonb` in database
      * - Nullable, no default
      */
      device_ids?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
      /**
      * **maintenances.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **maintenances.lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      lab_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **maintenances.maintainer_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      maintainer_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **maintenances.start_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      start_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment;
      /**
      * **maintenances.status**
      * - `maintenance_status` in database
      * - `NOT NULL`, no default
      */
      status: maintenance_status | db.Parameter<maintenance_status> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **maintenances.complete_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      complete_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **maintenances.device_ids**
      * - `jsonb` in database
      * - Nullable, no default
      */
      device_ids?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **maintenances.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **maintenances.lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      lab_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **maintenances.maintainer_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      maintainer_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **maintenances.start_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      start_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **maintenances.status**
      * - `maintenance_status` in database
      * - `NOT NULL`, no default
      */
      status?: maintenance_status | db.Parameter<maintenance_status> | db.SQLFragment | db.SQLFragment<any, maintenance_status | db.Parameter<maintenance_status> | db.SQLFragment>;
    }
    export type UniqueIndex = 'maintenances_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **receipts**
   * - Table in database
   */
  export namespace receipts {
    export type Table = 'receipts';
    export interface Selectable {
      /**
      * **receipts.borrowed_at**
      * - `timetz` in database
      * - `NOT NULL`, no default
      */
      borrowed_at: db.TimeTzString;
      /**
      * **receipts.borrower_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      borrower_id: string;
      /**
      * **receipts.checker_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      checker_id: string | null;
      /**
      * **receipts.device_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      device_id: string;
      /**
      * **receipts.expected_returned_at**
      * - `timetz` in database
      * - `NOT NULL`, no default
      */
      expected_returned_at: db.TimeTzString;
      /**
      * **receipts.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **receipts.lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      lab_id: string;
      /**
      * **receipts.quantity**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      quantity: number;
      /**
      * **receipts.returned_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      returned_at: db.TimeTzString | null;
    }
    export interface JSONSelectable {
      /**
      * **receipts.borrowed_at**
      * - `timetz` in database
      * - `NOT NULL`, no default
      */
      borrowed_at: db.TimeTzString;
      /**
      * **receipts.borrower_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      borrower_id: string;
      /**
      * **receipts.checker_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      checker_id: string | null;
      /**
      * **receipts.device_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      device_id: string;
      /**
      * **receipts.expected_returned_at**
      * - `timetz` in database
      * - `NOT NULL`, no default
      */
      expected_returned_at: db.TimeTzString;
      /**
      * **receipts.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **receipts.lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      lab_id: string;
      /**
      * **receipts.quantity**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      quantity: number;
      /**
      * **receipts.returned_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      returned_at: db.TimeTzString | null;
    }
    export interface Whereable {
      /**
      * **receipts.borrowed_at**
      * - `timetz` in database
      * - `NOT NULL`, no default
      */
      borrowed_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn>;
      /**
      * **receipts.borrower_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      borrower_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **receipts.checker_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      checker_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **receipts.device_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      device_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **receipts.expected_returned_at**
      * - `timetz` in database
      * - `NOT NULL`, no default
      */
      expected_returned_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn>;
      /**
      * **receipts.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **receipts.lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      lab_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **receipts.quantity**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      quantity?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **receipts.returned_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      returned_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **receipts.borrowed_at**
      * - `timetz` in database
      * - `NOT NULL`, no default
      */
      borrowed_at: db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment;
      /**
      * **receipts.borrower_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      borrower_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **receipts.checker_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      checker_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **receipts.device_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      device_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **receipts.expected_returned_at**
      * - `timetz` in database
      * - `NOT NULL`, no default
      */
      expected_returned_at: db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment;
      /**
      * **receipts.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **receipts.lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      lab_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **receipts.quantity**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      quantity: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **receipts.returned_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      returned_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **receipts.borrowed_at**
      * - `timetz` in database
      * - `NOT NULL`, no default
      */
      borrowed_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment>;
      /**
      * **receipts.borrower_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      borrower_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **receipts.checker_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      checker_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **receipts.device_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      device_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **receipts.expected_returned_at**
      * - `timetz` in database
      * - `NOT NULL`, no default
      */
      expected_returned_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment>;
      /**
      * **receipts.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **receipts.lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      lab_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **receipts.quantity**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      quantity?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **receipts.returned_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      returned_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'receipts_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **reservations**
   * - Table in database
   */
  export namespace reservations {
    export type Table = 'reservations';
    export interface Selectable {
      /**
      * **reservations.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: Date;
      /**
      * **reservations.device_quantities**
      * - `jsonb` in database
      * - Nullable, no default
      */
      device_quantities: db.JSONValue | null;
      /**
      * **reservations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **reservations.lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      lab_id: string;
      /**
      * **reservations.pickup_time_end**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      pickup_time_end: Date;
      /**
      * **reservations.pickup_time_start**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      pickup_time_start: Date;
      /**
      * **reservations.return_time_end**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      return_time_end: Date;
      /**
      * **reservations.return_time_start**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      return_time_start: Date;
      /**
      * **reservations.status**
      * - `reservation_status` in database
      * - `NOT NULL`, no default
      */
      status: reservation_status;
      /**
      * **reservations.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: Date;
      /**
      * **reservations.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
    }
    export interface JSONSelectable {
      /**
      * **reservations.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: db.TimestampTzString;
      /**
      * **reservations.device_quantities**
      * - `jsonb` in database
      * - Nullable, no default
      */
      device_quantities: db.JSONValue | null;
      /**
      * **reservations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **reservations.lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      lab_id: string;
      /**
      * **reservations.pickup_time_end**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      pickup_time_end: db.TimestampTzString;
      /**
      * **reservations.pickup_time_start**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      pickup_time_start: db.TimestampTzString;
      /**
      * **reservations.return_time_end**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      return_time_end: db.TimestampTzString;
      /**
      * **reservations.return_time_start**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      return_time_start: db.TimestampTzString;
      /**
      * **reservations.status**
      * - `reservation_status` in database
      * - `NOT NULL`, no default
      */
      status: reservation_status;
      /**
      * **reservations.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: db.TimestampTzString;
      /**
      * **reservations.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
    }
    export interface Whereable {
      /**
      * **reservations.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reservations.device_quantities**
      * - `jsonb` in database
      * - Nullable, no default
      */
      device_quantities?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reservations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reservations.lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      lab_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reservations.pickup_time_end**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      pickup_time_end?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reservations.pickup_time_start**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      pickup_time_start?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reservations.return_time_end**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      return_time_end?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reservations.return_time_start**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      return_time_start?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reservations.status**
      * - `reservation_status` in database
      * - `NOT NULL`, no default
      */
      status?: reservation_status | db.Parameter<reservation_status> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, reservation_status | db.Parameter<reservation_status> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reservations.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reservations.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **reservations.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **reservations.device_quantities**
      * - `jsonb` in database
      * - Nullable, no default
      */
      device_quantities?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
      /**
      * **reservations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **reservations.lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      lab_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **reservations.pickup_time_end**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      pickup_time_end: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **reservations.pickup_time_start**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      pickup_time_start: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **reservations.return_time_end**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      return_time_end: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **reservations.return_time_start**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      return_time_start: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **reservations.status**
      * - `reservation_status` in database
      * - `NOT NULL`, no default
      */
      status: reservation_status | db.Parameter<reservation_status> | db.SQLFragment;
      /**
      * **reservations.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **reservations.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **reservations.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **reservations.device_quantities**
      * - `jsonb` in database
      * - Nullable, no default
      */
      device_quantities?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **reservations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **reservations.lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      lab_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **reservations.pickup_time_end**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      pickup_time_end?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **reservations.pickup_time_start**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      pickup_time_start?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **reservations.return_time_end**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      return_time_end?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **reservations.return_time_start**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      return_time_start?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **reservations.status**
      * - `reservation_status` in database
      * - `NOT NULL`, no default
      */
      status?: reservation_status | db.Parameter<reservation_status> | db.SQLFragment | db.SQLFragment<any, reservation_status | db.Parameter<reservation_status> | db.SQLFragment>;
      /**
      * **reservations.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **reservations.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'reservations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **role_histories**
   * - Table in database
   */
  export namespace role_histories {
    export type Table = 'role_histories';
    export interface Selectable {
      /**
      * **role_histories.effective_end**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      effective_end: Date;
      /**
      * **role_histories.effective_start**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      effective_start: Date;
      /**
      * **role_histories.grantee_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      grantee_id: string;
      /**
      * **role_histories.granter_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      granter_id: string;
      /**
      * **role_histories.permissions**
      * - `jsonb` in database
      * - Nullable, no default
      */
      permissions: db.JSONValue | null;
    }
    export interface JSONSelectable {
      /**
      * **role_histories.effective_end**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      effective_end: db.TimestampTzString;
      /**
      * **role_histories.effective_start**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      effective_start: db.TimestampTzString;
      /**
      * **role_histories.grantee_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      grantee_id: string;
      /**
      * **role_histories.granter_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      granter_id: string;
      /**
      * **role_histories.permissions**
      * - `jsonb` in database
      * - Nullable, no default
      */
      permissions: db.JSONValue | null;
    }
    export interface Whereable {
      /**
      * **role_histories.effective_end**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      effective_end?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **role_histories.effective_start**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      effective_start?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **role_histories.grantee_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      grantee_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **role_histories.granter_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      granter_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **role_histories.permissions**
      * - `jsonb` in database
      * - Nullable, no default
      */
      permissions?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **role_histories.effective_end**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      effective_end: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **role_histories.effective_start**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      effective_start: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **role_histories.grantee_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      grantee_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **role_histories.granter_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      granter_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **role_histories.permissions**
      * - `jsonb` in database
      * - Nullable, no default
      */
      permissions?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **role_histories.effective_end**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      effective_end?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **role_histories.effective_start**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      effective_start?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **role_histories.grantee_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      grantee_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **role_histories.granter_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      granter_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **role_histories.permissions**
      * - `jsonb` in database
      * - Nullable, no default
      */
      permissions?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'role_histories_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **schema_migrations**
   * - Table in database
   */
  export namespace schema_migrations {
    export type Table = 'schema_migrations';
    export interface Selectable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string;
    }
    export interface JSONSelectable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string;
    }
    export interface Whereable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'schema_migrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **shipments**
   * - Table in database
   */
  export namespace shipments {
    export type Table = 'shipments';
    export interface Selectable {
      /**
      * **shipments.arrive_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      arrive_at: db.TimeTzString | null;
      /**
      * **shipments.arrive_lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      arrive_lab_id: string;
      /**
      * **shipments.devices**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      devices: db.JSONValue;
      /**
      * **shipments.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **shipments.receiver_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      receiver_id: string | null;
      /**
      * **shipments.sender_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      sender_id: string | null;
      /**
      * **shipments.start_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      start_at: db.TimeTzString | null;
      /**
      * **shipments.start_lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      start_lab_id: string;
      /**
      * **shipments.status**
      * - `shipment_status` in database
      * - `NOT NULL`, no default
      */
      status: shipment_status;
    }
    export interface JSONSelectable {
      /**
      * **shipments.arrive_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      arrive_at: db.TimeTzString | null;
      /**
      * **shipments.arrive_lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      arrive_lab_id: string;
      /**
      * **shipments.devices**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      devices: db.JSONValue;
      /**
      * **shipments.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **shipments.receiver_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      receiver_id: string | null;
      /**
      * **shipments.sender_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      sender_id: string | null;
      /**
      * **shipments.start_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      start_at: db.TimeTzString | null;
      /**
      * **shipments.start_lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      start_lab_id: string;
      /**
      * **shipments.status**
      * - `shipment_status` in database
      * - `NOT NULL`, no default
      */
      status: shipment_status;
    }
    export interface Whereable {
      /**
      * **shipments.arrive_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      arrive_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn>;
      /**
      * **shipments.arrive_lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      arrive_lab_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **shipments.devices**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      devices?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **shipments.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **shipments.receiver_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      receiver_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **shipments.sender_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      sender_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **shipments.start_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      start_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn>;
      /**
      * **shipments.start_lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      start_lab_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **shipments.status**
      * - `shipment_status` in database
      * - `NOT NULL`, no default
      */
      status?: shipment_status | db.Parameter<shipment_status> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, shipment_status | db.Parameter<shipment_status> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **shipments.arrive_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      arrive_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment;
      /**
      * **shipments.arrive_lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      arrive_lab_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **shipments.devices**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      devices: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment;
      /**
      * **shipments.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **shipments.receiver_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      receiver_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **shipments.sender_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      sender_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **shipments.start_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      start_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment;
      /**
      * **shipments.start_lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      start_lab_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **shipments.status**
      * - `shipment_status` in database
      * - `NOT NULL`, no default
      */
      status: shipment_status | db.Parameter<shipment_status> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **shipments.arrive_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      arrive_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **shipments.arrive_lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      arrive_lab_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **shipments.devices**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      devices?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment>;
      /**
      * **shipments.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **shipments.receiver_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      receiver_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **shipments.sender_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      sender_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **shipments.start_at**
      * - `timetz` in database
      * - Nullable, no default
      */
      start_at?: db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **shipments.start_lab_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      start_lab_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **shipments.status**
      * - `shipment_status` in database
      * - `NOT NULL`, no default
      */
      status?: shipment_status | db.Parameter<shipment_status> | db.SQLFragment | db.SQLFragment<any, shipment_status | db.Parameter<shipment_status> | db.SQLFragment>;
    }
    export type UniqueIndex = 'shipments_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **users**
   * - Table in database
   */
  export namespace users {
    export type Table = 'users';
    export interface Selectable {
      /**
      * **users.admin_labs**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      admin_labs: db.JSONValue;
      /**
      * **users.borrowed_devices**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      borrowed_devices: db.JSONValue;
      /**
      * **users.default_role**
      * - `user_role` in database
      * - `NOT NULL`, no default
      */
      default_role: user_role;
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **users.meta**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      meta: db.JSONValue;
      /**
      * **users.name**
      * - `text` in database
      * - Nullable, no default
      */
      name: string | null;
    }
    export interface JSONSelectable {
      /**
      * **users.admin_labs**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      admin_labs: db.JSONValue;
      /**
      * **users.borrowed_devices**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      borrowed_devices: db.JSONValue;
      /**
      * **users.default_role**
      * - `user_role` in database
      * - `NOT NULL`, no default
      */
      default_role: user_role;
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **users.meta**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      meta: db.JSONValue;
      /**
      * **users.name**
      * - `text` in database
      * - Nullable, no default
      */
      name: string | null;
    }
    export interface Whereable {
      /**
      * **users.admin_labs**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      admin_labs?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.borrowed_devices**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      borrowed_devices?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.default_role**
      * - `user_role` in database
      * - `NOT NULL`, no default
      */
      default_role?: user_role | db.Parameter<user_role> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, user_role | db.Parameter<user_role> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.meta**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      meta?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.name**
      * - `text` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **users.admin_labs**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      admin_labs: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment;
      /**
      * **users.borrowed_devices**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      borrowed_devices: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment;
      /**
      * **users.default_role**
      * - `user_role` in database
      * - `NOT NULL`, no default
      */
      default_role: user_role | db.Parameter<user_role> | db.SQLFragment;
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **users.meta**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      meta: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment;
      /**
      * **users.name**
      * - `text` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **users.admin_labs**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      admin_labs?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment>;
      /**
      * **users.borrowed_devices**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      borrowed_devices?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment>;
      /**
      * **users.default_role**
      * - `user_role` in database
      * - `NOT NULL`, no default
      */
      default_role?: user_role | db.Parameter<user_role> | db.SQLFragment | db.SQLFragment<any, user_role | db.Parameter<user_role> | db.SQLFragment>;
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.meta**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      meta?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment>;
      /**
      * **users.name**
      * - `text` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'users_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = categories.Table | device_kinds.Table | devices.Table | expiration_extension_requests.Table | inventory_assessments.Table | labs.Table | maintenances.Table | receipts.Table | reservations.Table | role_histories.Table | schema_migrations.Table | shipments.Table | users.Table;
    export type Selectable = categories.Selectable | device_kinds.Selectable | devices.Selectable | expiration_extension_requests.Selectable | inventory_assessments.Selectable | labs.Selectable | maintenances.Selectable | receipts.Selectable | reservations.Selectable | role_histories.Selectable | schema_migrations.Selectable | shipments.Selectable | users.Selectable;
    export type JSONSelectable = categories.JSONSelectable | device_kinds.JSONSelectable | devices.JSONSelectable | expiration_extension_requests.JSONSelectable | inventory_assessments.JSONSelectable | labs.JSONSelectable | maintenances.JSONSelectable | receipts.JSONSelectable | reservations.JSONSelectable | role_histories.JSONSelectable | schema_migrations.JSONSelectable | shipments.JSONSelectable | users.JSONSelectable;
    export type Whereable = categories.Whereable | device_kinds.Whereable | devices.Whereable | expiration_extension_requests.Whereable | inventory_assessments.Whereable | labs.Whereable | maintenances.Whereable | receipts.Whereable | reservations.Whereable | role_histories.Whereable | schema_migrations.Whereable | shipments.Whereable | users.Whereable;
    export type Insertable = categories.Insertable | device_kinds.Insertable | devices.Insertable | expiration_extension_requests.Insertable | inventory_assessments.Insertable | labs.Insertable | maintenances.Insertable | receipts.Insertable | reservations.Insertable | role_histories.Insertable | schema_migrations.Insertable | shipments.Insertable | users.Insertable;
    export type Updatable = categories.Updatable | device_kinds.Updatable | devices.Updatable | expiration_extension_requests.Updatable | inventory_assessments.Updatable | labs.Updatable | maintenances.Updatable | receipts.Updatable | reservations.Updatable | role_histories.Updatable | schema_migrations.Updatable | shipments.Updatable | users.Updatable;
    export type UniqueIndex = categories.UniqueIndex | device_kinds.UniqueIndex | devices.UniqueIndex | expiration_extension_requests.UniqueIndex | inventory_assessments.UniqueIndex | labs.UniqueIndex | maintenances.UniqueIndex | receipts.UniqueIndex | reservations.UniqueIndex | role_histories.UniqueIndex | schema_migrations.UniqueIndex | shipments.UniqueIndex | users.UniqueIndex;
    export type Column = categories.Column | device_kinds.Column | devices.Column | expiration_extension_requests.Column | inventory_assessments.Column | labs.Column | maintenances.Column | receipts.Column | reservations.Column | role_histories.Column | schema_migrations.Column | shipments.Column | users.Column;
  
    export type AllBaseTables = [categories.Table, device_kinds.Table, devices.Table, expiration_extension_requests.Table, inventory_assessments.Table, labs.Table, maintenances.Table, receipts.Table, reservations.Table, role_histories.Table, schema_migrations.Table, shipments.Table, users.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [categories.Table, device_kinds.Table, devices.Table, expiration_extension_requests.Table, inventory_assessments.Table, labs.Table, maintenances.Table, receipts.Table, reservations.Table, role_histories.Table, schema_migrations.Table, shipments.Table, users.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "categories": categories.Selectable;
    "device_kinds": device_kinds.Selectable;
    "devices": devices.Selectable;
    "expiration_extension_requests": expiration_extension_requests.Selectable;
    "inventory_assessments": inventory_assessments.Selectable;
    "labs": labs.Selectable;
    "maintenances": maintenances.Selectable;
    "receipts": receipts.Selectable;
    "reservations": reservations.Selectable;
    "role_histories": role_histories.Selectable;
    "schema_migrations": schema_migrations.Selectable;
    "shipments": shipments.Selectable;
    "users": users.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "categories": categories.JSONSelectable;
    "device_kinds": device_kinds.JSONSelectable;
    "devices": devices.JSONSelectable;
    "expiration_extension_requests": expiration_extension_requests.JSONSelectable;
    "inventory_assessments": inventory_assessments.JSONSelectable;
    "labs": labs.JSONSelectable;
    "maintenances": maintenances.JSONSelectable;
    "receipts": receipts.JSONSelectable;
    "reservations": reservations.JSONSelectable;
    "role_histories": role_histories.JSONSelectable;
    "schema_migrations": schema_migrations.JSONSelectable;
    "shipments": shipments.JSONSelectable;
    "users": users.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "categories": categories.Whereable;
    "device_kinds": device_kinds.Whereable;
    "devices": devices.Whereable;
    "expiration_extension_requests": expiration_extension_requests.Whereable;
    "inventory_assessments": inventory_assessments.Whereable;
    "labs": labs.Whereable;
    "maintenances": maintenances.Whereable;
    "receipts": receipts.Whereable;
    "reservations": reservations.Whereable;
    "role_histories": role_histories.Whereable;
    "schema_migrations": schema_migrations.Whereable;
    "shipments": shipments.Whereable;
    "users": users.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "categories": categories.Insertable;
    "device_kinds": device_kinds.Insertable;
    "devices": devices.Insertable;
    "expiration_extension_requests": expiration_extension_requests.Insertable;
    "inventory_assessments": inventory_assessments.Insertable;
    "labs": labs.Insertable;
    "maintenances": maintenances.Insertable;
    "receipts": receipts.Insertable;
    "reservations": reservations.Insertable;
    "role_histories": role_histories.Insertable;
    "schema_migrations": schema_migrations.Insertable;
    "shipments": shipments.Insertable;
    "users": users.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "categories": categories.Updatable;
    "device_kinds": device_kinds.Updatable;
    "devices": devices.Updatable;
    "expiration_extension_requests": expiration_extension_requests.Updatable;
    "inventory_assessments": inventory_assessments.Updatable;
    "labs": labs.Updatable;
    "maintenances": maintenances.Updatable;
    "receipts": receipts.Updatable;
    "reservations": reservations.Updatable;
    "role_histories": role_histories.Updatable;
    "schema_migrations": schema_migrations.Updatable;
    "shipments": shipments.Updatable;
    "users": users.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "categories": categories.UniqueIndex;
    "device_kinds": device_kinds.UniqueIndex;
    "devices": devices.UniqueIndex;
    "expiration_extension_requests": expiration_extension_requests.UniqueIndex;
    "inventory_assessments": inventory_assessments.UniqueIndex;
    "labs": labs.UniqueIndex;
    "maintenances": maintenances.UniqueIndex;
    "receipts": receipts.UniqueIndex;
    "reservations": reservations.UniqueIndex;
    "role_histories": role_histories.UniqueIndex;
    "schema_migrations": schema_migrations.UniqueIndex;
    "shipments": shipments.UniqueIndex;
    "users": users.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "categories": categories.Column;
    "device_kinds": device_kinds.Column;
    "devices": devices.Column;
    "expiration_extension_requests": expiration_extension_requests.Column;
    "inventory_assessments": inventory_assessments.Column;
    "labs": labs.Column;
    "maintenances": maintenances.Column;
    "receipts": receipts.Column;
    "reservations": reservations.Column;
    "role_histories": role_histories.Column;
    "schema_migrations": schema_migrations.Column;
    "shipments": shipments.Column;
    "users": users.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "categories": categories.SQL;
    "device_kinds": device_kinds.SQL;
    "devices": devices.SQL;
    "expiration_extension_requests": expiration_extension_requests.SQL;
    "inventory_assessments": inventory_assessments.SQL;
    "labs": labs.SQL;
    "maintenances": maintenances.SQL;
    "receipts": receipts.SQL;
    "reservations": reservations.SQL;
    "role_histories": role_histories.SQL;
    "schema_migrations": schema_migrations.SQL;
    "shipments": shipments.SQL;
    "users": users.SQL;
  }[T];

}
